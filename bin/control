#!/bin/bash
source $OPENSHIFT_CARTRIDGE_SDK_BASH

FUSE_BIN_DIR=${OPENSHIFT_FUSE_DIR}/container/bin
FUSE_PID_FILE=${OPENSHIFT_FUSE_DIR}/container/instances/instance.properties
FUSE_PASSWD_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/passwd

function start() {
  if is_running; then
    client_message "${OPENSHIFT_APP_NAME} already started"
  else  
    ${FUSE_BIN_DIR}/start

    if [ -f ${OPENSHIFT_FUSE_DIR}/execute_join ]; then
      rm ${OPENSHIFT_FUSE_DIR}/execute_join
      wait_for_start
      retries=40
      while [ $retries -gt 1 ]; do
        if ${FUSE_BIN_DIR}/client -r 5 -d 5 -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "wait-for-service io.fabric8.boot.commands.service.JoinAvailable"; then
           break;
        fi
        let retries=$retries-1
        sleep 5
      done
      ${FUSE_BIN_DIR}/client -h ${OPENSHIFT_FUSE_IP} -a ${OPENSHIFT_FUSE_SSH_PORT} -u admin -p ${OPENSHIFT_FUSE_PASSWORD} "fabric:join -f -b ${OPENSHIFT_FUSE_IP} --zookeeper-password ${OPENSHIFT_FUSE_PASSWORD} ${OPENSHIFT_FUSE_ZOOKEEPER_URL}"

    else
      wait_for_start 'wait-for-fabric'
    fi
    client_message "Started application"
  fi
  
  # apply any patches we have in patches dir to the booted GA distro
  ${OPENSHIFT_FUSE_DIR}/bin/upgrade
}

function stop() {
    if [ -f $FUSE_PID_FILE ]; then
        PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
        
        # Lets first try a graceful stop.
        ${FUSE_BIN_DIR}/stop
        wait_for_stop $PID 20

        # if process has not stopped.. lets get a little more agressive.. 
        if ps -p $PID > /dev/null; then
          client_message "${OPENSHIFT_APP_NAME} did not stop after 20 seconds, running a kill"
          kill $PID
          wait_for_stop $PID 20
          # if process has not stopped.. lets get really agressive.. 
          if ps -p $PID > /dev/null; then
            client_message "${OPENSHIFT_APP_NAME} did not stop after 20 seconds, running a kill -9"
            kill -9 $PID
            wait_for_stop $PID 20
            if ps -p $PID> /dev/null; then
              client_error "Command Failed: Could not stop the ${OPENSHIFT_APP_NAME} application."
            fi
          fi
        fi

        client_result "Stopped ${OPENSHIFT_APP_NAME}"
    else
         echo "${OPENSHIFT_APP_NAME} was stopped already"
    fi
}

function restart() {
    if is_running; then
        stop
    fi
    start
}

function status() {
   if is_running; then
      client_result "${OPENSHIFT_APP_NAME} is running"
   else
      client_result "${OPENSHIFT_APP_NAME} is either stopped or inaccessible"
   fi
}

function reload() {
    client_message "Reloading app ${OPENSHIFT_APP_NAME}"
    restart
}

function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_FUSE_LOG_DIR"
  shopt -s dotglob
  shopt -s extglob
  not_removed=karaf-${OPENSHIFT_APP_NAME}.log
  (cd ${OPENSHIFT_FUSE_LOG_DIR}; for name in `echo "@(!(${not_removed}))"`; do rm -rf $name; done)
  truncate -s0 "${OPENSHIFT_FUSE_LOG_DIR}/karaf-${OPENSHIFT_APP_NAME}.log"
}

function is_running() {
   #Check if instance file exists
   if [ ! -f $FUSE_PID_FILE ]; then
      return 1
   fi

   #Check if pid exists
   PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
   if [ "$PID" = "" ]; then
      return 1
   elif ps -p $PID > /dev/null; then
      return 0
   else
      rm $FUSE_PID_FILE
      return 1
   fi
}

function wait_for_stop() {
    for i in $(seq 1 $2); do
        if ! ps -p $1 > /dev/null; then
            rm $FUSE_PID_FILE
            break
        else
            sleep 1
        fi
    done  
}

function wait_for_start() {
  for i in {1..20};
     do
       if [ ! -f $FUSE_PID_FILE ]; then
         sleep 1
       else
         break
       fi
     done
   if [ -f $FUSE_PID_FILE ]; then
      for j in {1..20};
         do
           PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F "=" '{print $2}'`
           if [ "$PID" = "" ]; then
             sleep 1
           else
            break
           fi
     done
     if ps -p $PID > /dev/null; then
       if [ "$1" == "wait-for-fabric" ] ; then
         retries=300
         fabric_loaded=0
         while [ $retries -gt 1 ]; do
            result=`curl -s http://admin:${OPENSHIFT_FUSE_PASSWORD}@$OPENSHIFT_FUSE_IP:8080/jolokia/read/io.fabric8:type=Fabric/CurrentContainerName || :`
            ( echo $result | grep '"status":200' > /dev/null ) && fabric_loaded=1 && break
            let retries=$retries-1
            sleep 1
         done
         if [ $fabric_loaded -eq 1 ]; then
           client_result ""
         else
           client_error "Command Failed: Could not reach ${OPENSHIFT_APP_NAME} console."
           exit 1
         fi
       fi
     else
       client_error "Command Failed: ${OPENSHIFT_APP_NAME} ($PID) is not running"
       exit 1
     fi
   else
    client_error "Command Failed: Could not find instance.properties"
    exit 1
   fi
}

function deploy() {
  client_message "Please use the fabric git repo instead of the OS application git repo:"
  client_message ""
  client_message "  git clone -b 1.0 http://admin:${OPENSHIFT_FUSE_DOMAIN_PASSWORD}@${OPENSHIFT_FUSE_DOMAIN_DNS}/git/fabric"
  client_message ""
  
  
  # fabric_shell "fabric:import ${OPENSHIFT_REPO_DIR}/.openshift/config/profiles"
}

function fabric_shell() {
 password=`cat ${FUSE_PASSWD_FILE}`
 client_message "Connnecting to shell using: ${password}"
 ${FUSE_BIN_DIR}/client -h ${OPENSHIFT_FUSE_IP} -u admin -p ${password} $*
}

function threaddump() {
  echo "Thread dump for the application"

    if ! is_running; then
        echo "${OPENSHIFT_APP_NAME} is stopped"
    elif [ -f "$FUSE_PID_FILE" ]; then
        pid=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
        jstack -l $pid > $OPENSHIFT_FUSE_LOG_DIR/threaddump.log
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -g $OPENSHIFT_GEAR_UUID -f ${OPENSHIFT_FUSE_LOG_DIR}threaddump.log -o '-n 250'"
    else 
        echo "Failed to locate the PID File"
    fi
}

case "$1" in
  deploy)    deploy ;;
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  pre-snapshot)  
    sleep 5
    ;;
  pre-restore)
    sleep 5
    if ! is_running; then
        # move aside old data dir
        rm -rf ${OPENSHIFT_FUSE_DIR}/container/data.restore.bak
        mv ${OPENSHIFT_FUSE_DIR}/container/data ${OPENSHIFT_FUSE_DIR}/container/data.restore.bak
    else
        echo "Can't restore because Fuse app is still running."
    fi
    ;;
  post-restore)
    sleep 5
    if [ -d ${OPENSHIFT_FUSE_DIR}/container/data ]; then
        # data dir got restored so clean up
        rm -rf ${OPENSHIFT_FUSE_DIR}/container/data.restore.bak
        mv ${OPENSHIFT_FUSE_DIR}/container/data ${OPENSHIFT_FUSE_DIR}/container/data.restore.bak
    else
        mv ${OPENSHIFT_FUSE_DIR}/container/data.restore.bak ${OPENSHIFT_FUSE_DIR}/container/data
    fi
    ;;
  reload)    reload ;;
  tidy)      tidy ;;
  threaddump)      threaddump ;;
  *)         exit 0
esac
