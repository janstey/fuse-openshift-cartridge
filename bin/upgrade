#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH

if [ -f ${OPENSHIFT_FUSE_DIR}/upgrade_after_install ]; then
  rm ${OPENSHIFT_FUSE_DIR}/upgrade_after_install
  export invoked_from_install=1
else
  export invoked_from_install=0
fi

FUSE_BIN_DIR=${OPENSHIFT_FUSE_DIR}/container/bin
FUSE_PATCH_DIR=${OPENSHIFT_FUSE_DIR}/patches
FUSE_PASSWD_FILE=${OPENSHIFT_FUSE_DIR}/container/etc/passwd
FUSE_PID_FILE=${OPENSHIFT_FUSE_DIR}/container/instances/instance.properties
password=`cat ${FUSE_PASSWD_FILE}`

function start() {
  if is_running; then
    client_message "${OPENSHIFT_APP_NAME} already started"
  else  
    ${FUSE_BIN_DIR}/start
    client_message "Started application"
  fi
}

function stop() {
    if [ -f $FUSE_PID_FILE ]; then
        PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
        
        # Lets first try a graceful stop.
        ${FUSE_BIN_DIR}/stop
        wait_for_stop $PID 20

        # if process has not stopped.. lets get a little more agressive.. 
        if ps -p $PID > /dev/null; then
          client_message "${OPENSHIFT_APP_NAME} did not stop after 20 seconds, running a kill"
          kill $PID
          wait_for_stop $PID 20
          # if process has not stopped.. lets get really agressive.. 
          if ps -p $PID > /dev/null; then
            client_message "${OPENSHIFT_APP_NAME} did not stop after 20 seconds, running a kill -9"
            kill -9 $PID
            wait_for_stop $PID 20
            if ps -p $PID> /dev/null; then
              client_error "Command Failed: Could not stop the ${OPENSHIFT_APP_NAME} application."
            fi
          fi
        fi

        client_result "Stopped ${OPENSHIFT_APP_NAME}"
    else
         echo "${OPENSHIFT_APP_NAME} was stopped already"
    fi
}

function restart() {
    if is_running; then
        stop
    fi
    start
}

function is_ensemble_server() {
   retries=60
   fabric_loaded=0
   while [ $retries -gt 1 ]; do
      content=`curl -s "http://admin:${OPENSHIFT_FUSE_PASSWORD}@$OPENSHIFT_FUSE_IP:8080/jolokia/exec/io.fabric8:type=Fabric/getContainer(java.lang.String)/${OPENSHIFT_APP_NAME}"`
      echo $content | grep '"status":200' > /dev/null
      if [ $? -eq 0 ]; then
        echo $content | grep '"ensembleServer":true' > /dev/null
        if [ $? -eq 0 ]; then
          fabric_loaded=1
        fi
        break
      fi
      let retries=$retries-1
      sleep 5
   done
   if [ $fabric_loaded -eq 1 ]; then
     return 0;
   fi
   return 1;
}

function is_fabric_provisioned() {
  for i in {1..20};
     do
       if [ ! -f $FUSE_PID_FILE ]; then
         sleep 1
       else
         break
       fi
     done
   if [ -f $FUSE_PID_FILE ]; then
      for j in {1..20};
         do
           PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F "=" '{print $2}'`
           if [ "$PID" = "" ]; then
             sleep 1
           else
            break
           fi
     done
     if ps -p $PID > /dev/null; then
       retries=60
       fabric_loaded=0
       while [ $retries -gt 1 ]; do
          # only check whether the current container has provisioned sucessfully
          curl -s "http://admin:${OPENSHIFT_FUSE_PASSWORD}@$OPENSHIFT_FUSE_IP:8080/jolokia/exec/io.fabric8:type=Fabric/getContainer(java.lang.String)/${OPENSHIFT_APP_NAME}" | grep '"provisionResult":"success"' > /dev/null
          [ $? -eq 0 ] && fabric_loaded=1 && break
          let retries=$retries-1
          sleep 5
       done
       if [ $fabric_loaded -eq 1 ]; then
         return 0;
       fi
     fi
   fi
   return 1;
}

function is_running() {
   #Check if instance file exists
   if [ ! -f $FUSE_PID_FILE ]; then
      return 1
   fi

   #Check if pid exists
   PID=`cat $FUSE_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
   if [ "$PID" = "" ]; then
      return 1
   elif ps -p $PID > /dev/null; then
      return 0
   else
      rm $FUSE_PID_FILE
      return 1
   fi
}

function wait_for_stop() {
    for i in $(seq 1 $2); do
        if ! ps -p $1 > /dev/null; then
            rm $FUSE_PID_FILE
            break
        else
            sleep 1
        fi
    done  
}

patch_applied=0
try_restart=0

if [ -d $FUSE_PATCH_DIR ]; then
  if is_running; then
    files=$(find $FUSE_PATCH_DIR -name "*.zip" | sort)
    for patch in $files ; do
      if [ -d $patch ]; then
        continue
      fi
      if [[ $patch == *.zip ]]; then

        if ! is_ensemble_server; then
          client_message "${OPENSHIFT_APP_NAME} will recieve patches when the ensemble server is patched."
          rm $patch
          touch "${patch}.applied"
          exit 0
        fi

        client_message "Waiting for patching service to become available..."

        ${FUSE_BIN_DIR}/client -r 30 -d 5 -h ${OPENSHIFT_FUSE_IP} -u admin -p ${password} 'dev:wait-for-service --timeout 300000 "(&(objectClass=org.apache.felix.service.command.Function)(osgi.command.scope=fabric)(osgi.command.function=patch-apply))"'
          
        if [ "$?" -eq 0 ]; then
          client_message "Patching all profile versions with ${patch}"

          ${FUSE_BIN_DIR}/client -h ${OPENSHIFT_FUSE_IP} -u admin -p ${password} "fabric:patch-apply --all-versions file:${patch}"
          if [ "$?" -eq 0 ]; then
            patch_applied=1
            # only want to apply successful patches once
            rm $patch
            touch "${patch}.applied"
          else
            client_message "Patch was not succesfully applied. You can try to apply this patch again on the container shell using: "
            client_message "fabric:patch-apply --all-versions file:${patch}"
            exit 1
          fi
        else
          # patch could have already been applied from another app so lets try to restart it in case it hung
          client_message "Patching service was unavailable so could not apply patch."
          try_restart=1
        fi
      fi
    done
  else
    client_message "Container not started so patch will be applied after the next startup."
  fi
fi

# we don't need to restart if this is a first time install
if [ "$invoked_from_install" -eq 0 ]; then
  if [ "$patch_applied" -eq 1 ]; then
    if ! is_fabric_provisioned; then
      client_message "${OPENSHIFT_APP_NAME} fabric needs to be restarted to complete installation of patch."
      restart
      exit 0
    fi
  fi

  if [ "$try_restart" -eq 1 ]; then
      client_message "${OPENSHIFT_APP_NAME} fabric needs to be restarted to complete provisioning."
      restart
      exit 0
  fi
fi
